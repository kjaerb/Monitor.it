datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String     @id @default(cuid())
    name             String?
    email            String?    @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    profile          Profile?
    trainings        Training[] @relation("Trainings")
    sharedTrainings  Training[] @relation("SharedTrainings")
    requestsSent     Request[]  @relation("RequestsSent")
    requestsReceived Request[]  @relation("RequestsReceived")
}

enum RequestStatus {
    PENDING
    ACCEPTED
    REJECTED
}

model Request {
    id         String        @id @default(cuid())
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    status     RequestStatus @default(PENDING)
    sender     User          @relation(name: "RequestsSent", fields: [senderId], references: [id])
    senderId   String
    receiver   User          @relation(name: "RequestsReceived", fields: [receiverId], references: [id])
    receiverId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id         String      @id @default(cuid())
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    role       String?     @db.VarChar(255)
    sport      String?     @db.VarChar(255)
    figAthlete Figathlete?
    user       User        @relation(fields: [userId], references: [id])
    userId     String      @unique
}

model Figathlete {
    idgymnastlicense   Int      @id
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    gymnastid          Int
    discipline         String   @db.VarChar(255)
    validto            DateTime
    licensestatus      DateTime
    figImgUrl          String
    preferredlastname  String   @db.VarChar(255)
    preferredfirstname String   @db.VarChar(255)
    birth              DateTime
    gender             String   @db.VarChar(255)
    country            String   @db.VarChar(255)
    profile            Profile  @relation(fields: [profileId], references: [id])
    profileId          String   @unique
}

model Training {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    reps      Rep[]
    user      User     @relation("Trainings", fields: [userId], references: [id])
    userId    String
    users     User[]   @relation("SharedTrainings")
}

model Rep {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    training   Training? @relation(fields: [trainingId], references: [id])
    trainingId String?
}
