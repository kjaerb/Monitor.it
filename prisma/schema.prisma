datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String     @id @default(cuid())
    name            String?
    email           String?    @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    profile         Profile?
    coaches         User[]     @relation("Coaches")
    athletes        User[]     @relation("Athletes")
    coachesProfile  User?      @relation("Coaches", fields: [coachesId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    coachesId       String?
    athletesProfile User?      @relation("Athletes", fields: [athletesId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    athletesId      String?
    trainings       Training[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id           String      @id @default(cuid())
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    role         String?
    sport        String?
    figAthlete   FIGAthlete? // Should probably be changed to a model later @relation(fields: [fIGAthleteId], references: [id])
    user         User        @relation(fields: [userId], references: [id])
    userId       String      @unique
    fIGAthleteId String
}

model FIGAthlete {
    idgymnastlicense   Int      @id
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    gymnastid          Int
    discipline         String
    validto            DateTime
    licensestatus      DateTime
    figImgUrl          String
    preferredlastname  String
    preferredfirstname String
    birth              DateTime
    gender             String
    country            String
    profile            Profile  @relation(fields: [profileId], references: [id])
    profileId          String   @unique
}

model Training {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    reps      Rep[]
    user      User?    @relation(fields: [userId], references: [id])
    userId    String?
}

model Rep {
    id         String    @id @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    Training   Training? @relation(fields: [trainingId], references: [id])
    trainingId String?
}
